{"version":3,"file":"ngx-audio-player.js","sources":["ng:/ngx-audio-player/lib/service/audio-player-service/audio-player.service.ts","ng:/ngx-audio-player/lib/component/base/base-audio-player-components.ts","ng:/ngx-audio-player/lib/component/mat-advanced-audio-player/mat-advanced-audio-player.component.ts","ng:/ngx-audio-player/lib/component/mat-basic-audio-player/mat-basic-audio-player.component.ts","ng:/ngx-audio-player/lib/pipe/seconds-to-minutes.ts","ng:/ngx-audio-player/lib/ngx-audio-player.module.ts","ng:/ngx-audio-player/lib/model/track.model.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Track } from '../../model/track.model';\n\n@Injectable()\nexport class AudioPlayerService {\n\n  playlist: Track[] = [];\n\n  indexSong = 0;\n  currentTrack: BehaviorSubject<{}> = new BehaviorSubject(this.playlist[this.indexSong]);\n  currentTime = 0;\n  duration = 0;\n\n  constructor() {\n\n  }\n\n  init(): void {\n    this.updateCurrentSong();\n  }\n\n  nextSong(): void {\n    if ((this.indexSong + 1) >= this.playlist.length) {\n      this.indexSong = 0;\n    } else {\n      this.indexSong++;\n    }\n    this.updateCurrentSong();\n  }\n\n  previousSong(): void {\n    if ((this.indexSong - 1) < 0) {\n      this.indexSong = (this.playlist.length - 1);\n    } else {\n      this.indexSong--;\n    }\n    this.updateCurrentSong();\n  }\n\n  resetPlaylist(): void {\n    this.indexSong = 0;\n    this.updateCurrentSong();\n  }\n\n  selectATrack(index: number): void {\n    this.indexSong = index - 1;\n    this.updateCurrentSong();\n  }\n\n  updateCurrentSong(): void {\n    const current = this.playlist[this.indexSong];\n    const previous = ((this.indexSong - 1) >= 0) ? this.playlist[this.indexSong - 1] : this.playlist[this.playlist.length - 1];\n    const next = ((this.indexSong + 1) >= this.playlist.length) ? this.playlist[0] : this.playlist[this.indexSong + 1];\n\n    this.currentTrack.next([\n      previous,\n      current,\n      next\n    ]);\n  }\n\n  getSubjectCurrentTrack(): BehaviorSubject<{}> {\n    return this.currentTrack;\n  }\n\n  getPlaylist(): Track[] {\n    return this.playlist;\n  }\n\n  setPlaylist(playlist: Track[]) {\n    this.playlist = playlist;\n  }\n\n  getIndexSong() {\n    return this.indexSong;\n  }\n}\n","import { ViewChild, ElementRef } from '@angular/core';\nimport { MatSlider } from '@angular/material';\n\nexport class BaseAudioPlayerFunctions {\n\n    @ViewChild('audioPlayer', {static: true}) player: ElementRef;\n    timeLineDuration: MatSlider;\n\n    loaderDisplay = false;\n    isPlaying = false;\n    currentTime = 0;\n    volume = 0.1;\n    duration = 0.01;\n\n    currTimePosChanged(event) {\n        this.player.nativeElement.currentTime = event.value;\n    }\n\n    bindPlayerEvent(): void {\n        this.player.nativeElement.addEventListener('playing', () => {\n            this.isPlaying = true;\n            this.duration = Math.floor(this.player.nativeElement.duration);\n        });\n        this.player.nativeElement.addEventListener('pause', () => {\n            this.isPlaying = false;\n        });\n        this.player.nativeElement.addEventListener('timeupdate', () => {\n            this.currentTime = Math.floor(this.player.nativeElement.currentTime);\n        });\n        this.player.nativeElement.addEventListener('volume', () => {\n            this.volume = Math.floor(this.player.nativeElement.volume);\n        });\n        this.player.nativeElement.addEventListener('loadstart', () => {\n            this.loaderDisplay = true;\n        });\n        this.player.nativeElement.addEventListener('loadeddata', () => {\n            this.loaderDisplay = false;\n            this.duration = Math.floor(this.player.nativeElement.duration);\n        });\n    }\n\n    playBtnHandler(): void {\n        if (this.loaderDisplay) {\n            return;\n        }\n        if (this.player.nativeElement.paused) {\n            this.player.nativeElement.play(this.currentTime);\n        } else {\n            this.currentTime = this.player.nativeElement.currentTime;\n            this.player.nativeElement.pause();\n        }\n    }\n\n    play(): void {\n        setTimeout(() => {\n            this.player.nativeElement.play();\n        }, 0);\n    }\n\n    toggleVolume() {\n        if (this.volume === 0) {\n            this.setVolume(1.0);\n        } else {\n            this.setVolume(0);\n        }\n    }\n\n    private setVolume(vol) {\n        this.volume = vol;\n        this.player.nativeElement.volume = this.volume;\n    }\n\n}\n","import { Component, OnInit, Input, ViewChild } from '@angular/core';\nimport { AudioPlayerService } from '../../service/audio-player-service/audio-player.service';\nimport { MatSlider, MatPaginator, MatTableDataSource } from '@angular/material';\nimport { Track } from '../../model/track.model';\nimport { BaseAudioPlayerFunctions } from '../base/base-audio-player-components';\n\n@Component({\n    selector: 'mat-advanced-audio-player',\n    templateUrl: './mat-advanced-audio-player.component.html',\n    styleUrls: ['./mat-advanced-audio-player.component.css']\n})\nexport class MatAdvancedAudioPlayerComponent extends BaseAudioPlayerFunctions implements OnInit {\n\n    displayedColumns: string[] = ['title', 'status'];\n    timeLineDuration: MatSlider;\n\n    dataSource = new MatTableDataSource<Track>();\n\n    paginator: MatPaginator;\n\n    playlistData: Track[];\n\n    @Input()\n    displayTitle = true;\n\n    @Input()\n    displayPlaylist = true;\n\n    @Input()\n    pageSizeOptions = [10, 20, 30];\n\n    @Input()\n    expanded = true;\n\n    @Input()\n    autoPlay = false;\n\n    @Input()\n    displayVolumeControls = true;\n\n    playlistTrack: any;\n\n    constructor(private playlistService: AudioPlayerService) {\n        super();\n    }\n\n    ngOnInit() {\n        this.setDataSourceAttributes();\n        this.bindPlayerEvent();\n        this.player.nativeElement.addEventListener('ended', () => {\n            if (this.checkIfSongHasStartedSinceAtleastTwoSeconds()) {\n                this.nextSong();\n            }\n        });\n        this.playlistService.setPlaylist(this.playlistData);\n        this.playlistService.getSubjectCurrentTrack().subscribe((playlistTrack) => {\n            this.playlistTrack = playlistTrack;\n        });\n        this.player.nativeElement.currentTime = 0;\n        this.playlistService.init();\n        if (this.autoPlay) {\n            super.play();\n        }\n    }\n\n    @ViewChild(MatPaginator, {static: false}) set matPaginator(mp: MatPaginator) {\n        this.paginator = mp;\n        this.setDataSourceAttributes();\n    }\n\n    setDataSourceAttributes() {\n        let index = 1;\n        if (this.playlistData) {\n            this.playlistData.forEach(data => {\n                data.index = index++;\n            });\n            this.dataSource = new MatTableDataSource<Track>(this.playlistData);\n            this.dataSource.paginator = this.paginator;\n        }\n    }\n\n    nextSong(): void {\n        if (((this.playlistService.indexSong + 1) % this.paginator.pageSize) === 0 ||\n            (this.playlistService.indexSong + 1) === this.paginator.length) {\n            if (this.paginator.hasNextPage()) {\n                this.paginator.nextPage();\n            } else if (!this.paginator.hasNextPage()) {\n                this.paginator.firstPage();\n            }\n        }\n        this.currentTime = 0;\n        this.duration = 0.01;\n        this.playlistService.nextSong();\n        this.play();\n    }\n\n    previousSong(): void {\n        this.currentTime = 0;\n        this.duration = 0.01;\n        if (!this.checkIfSongHasStartedSinceAtleastTwoSeconds()) {\n            if (((this.playlistService.indexSong) % this.paginator.pageSize) === 0 ||\n                (this.playlistService.indexSong) === 0) {\n                if (this.paginator.hasPreviousPage()) {\n                    this.paginator.previousPage();\n                } else if (!this.paginator.hasPreviousPage()) {\n                    this.paginator.lastPage();\n                }\n            }\n            this.playlistService.previousSong();\n        } else {\n            this.resetSong();\n        }\n        this.play();\n    }\n\n    resetSong(): void {\n        this.player.nativeElement.src = this.playlistTrack[1].link;\n    }\n\n    selectTrack(index: number): void {\n        console.log('selectTrack(index: number): void: ' + index);\n        this.playlistService.selectATrack(index);\n        setTimeout(() => {\n            this.player.nativeElement.play();\n        }, 0);\n    }\n\n    checkIfSongHasStartedSinceAtleastTwoSeconds(): boolean {\n        return this.player.nativeElement.currentTime > 2;\n    }\n\n    @Input()\n    set playlist(playlist: Track[]) {\n        this.playlistData = playlist;\n        this.ngOnInit();\n    }\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { BaseAudioPlayerFunctions } from '../base/base-audio-player-components';\n\n@Component({\n    selector: 'mat-basic-audio-player',\n    templateUrl: './mat-basic-audio-player.component.html',\n    styleUrls: ['./mat-basic-audio-player.component.css']\n})\nexport class MatBasicAudioPlayerComponent extends BaseAudioPlayerFunctions implements OnInit {\n\n    @Input()\n    title: string;\n\n    @Input()\n    audioUrl: string;\n\n    @Input()\n    displayTitle = false;\n\n    @Input()\n    autoPlay = false;\n\n    @Input()\n    displayVolumeControls = true;\n\n    constructor() {\n        super();\n    }\n\n    ngOnInit() {\n        this.bindPlayerEvent();\n        if (this.autoPlay) {\n            super.play();\n        }\n    }\n\n    resetSong(): void {\n        this.player.nativeElement.src = this.audioUrl;\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n/*\n * Transform seconds to minutes:seconds\n * Example : 270 -> 02:30\n*/\n@Pipe({name: 'secondsToMinutes'})\nexport class SecondsToMinutesPipe implements PipeTransform {\n    transform(time: number): string {\n        const minutes = ('0' + Math.floor(time / 60)).slice(-2);\n        const seconds = ('0' + time % 60).slice(-2);\n        return `${minutes}:${seconds}`;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  MatButtonModule, MatCardModule, MatSliderModule, MatExpansionModule, MatFormFieldModule, MatTableModule, MatPaginatorModule\n} from '@angular/material';\nimport { MatBasicAudioPlayerComponent } from './component/mat-basic-audio-player/mat-basic-audio-player.component';\nimport { AudioPlayerService } from './service/audio-player-service/audio-player.service';\nimport { CommonModule } from '@angular/common';\nimport { SecondsToMinutesPipe } from './pipe/seconds-to-minutes';\nimport { MatAdvancedAudioPlayerComponent } from './component/mat-advanced-audio-player/mat-advanced-audio-player.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faPlay, faPause, faSpinner, faStepForward, faStepBackward, faVolumeMute, faVolumeUp\n} from '@fortawesome/free-solid-svg-icons';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  exports: [\n    MatButtonModule, MatCardModule, MatTableModule, MatFormFieldModule,\n    MatSliderModule, MatExpansionModule, MatPaginatorModule\n  ]\n})\nexport class MaterialModule { }\n\n@NgModule({\n  declarations: [MatBasicAudioPlayerComponent, SecondsToMinutesPipe, MatAdvancedAudioPlayerComponent],\n  imports: [CommonModule, FormsModule, FontAwesomeModule, MaterialModule],\n  exports: [MatBasicAudioPlayerComponent, MatAdvancedAudioPlayerComponent],\n  providers: [AudioPlayerService]\n})\nexport class NgxAudioPlayerModule {\n  constructor() {\n    // Icons for User Favorite Page\n    library.add(faPlay, faPause, faSpinner, faStepForward, faStepBackward, faVolumeMute, faVolumeUp);\n  }\n}\n","export class Track {\n  index?: number;\n  link: string;\n  title: string;\n}\n"]}